package com.lutao.america.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lutao.america.exception.CustomException;
import com.lutao.america.model.Order;
import com.lutao.america.model.OrderList;
import com.lutao.america.model.OrderListFlt;
import com.lutao.america.model.PasgInfo;
import com.lutao.america.model.Pasgsect;
import com.lutao.america.model.Passenger;
import com.lutao.america.service.CityService;
import com.lutao.america.service.OrderListService;
import com.lutao.america.service.OrderService;
import com.lutao.america.service.PassengerService;
import com.lutao.america.vo.OrderFillParameter;
import com.lutao.america.vo.av.Av;
import com.lutao.common.utils.Cryption;
import com.lutao.common.utils.StringUtil;

import net.sf.json.JSONArray;
@Controller
@RequestMapping("/air")
public class AirController {
	private Log log = LogFactory.getLog(this.getClass().getName());
	@Resource
	private OrderService orderService;
	@Autowired
	private OrderListService orderListService;
	@Resource
	private CityService cityService;
	
	//passenger
	@Autowired
	private PassengerService psgService;
	
	@RequestMapping("/confirm")
	public ModelAndView Confirm(OrderFillParameter params,HttpServletRequest req) 
			throws JsonProcessingException, CustomException{
		ModelAndView view = new ModelAndView("/Orderknow");
		
		ObjectMapper mapper = new ObjectMapper();
		mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		
		Av av = null;
		try{
			String b64 = StringUtil.decodeBase64(params.getToken(), "UTF-8");
			av = mapper.readValue(b64, Av.class);
			String sign = av.getSign();
			log.info(sign);
			av.setSign("");
			String temp = mapper.writeValueAsString( av);
			log.info(temp);
			String md5 = Cryption.Md5( temp + av.getTime());
			log.info(md5);
			if(!md5.equals(sign)){
				av = null;
			}
		}catch(JsonMappingException e){
			e.printStackTrace();
		}catch(JsonParseException e){
			e.printStackTrace();
		}catch(JsonProcessingException e){
			e.printStackTrace();
		}catch(IOException e){
			e.printStackTrace();
		}
		if(null == av){
			throw new CustomException("请求异常！");
		}else{
			String temp = mapper.writeValueAsString( params);
			view.getModel().put("data", StringUtil.toBase64(temp, "UTF-8"));
			view.setViewName("/Orderknow");	
		}
		
		return view;
	}
	
	@RequestMapping("/orderDetail")
	@ResponseBody
	public ModelAndView Detail(HttpServletRequest req){
		ModelAndView mv=new ModelAndView();
		String orderId=req.getParameter("orderId");
		Order order=orderService.findById(Long.parseLong(orderId));
		for(PasgInfo p:order.getOrderAttr().getPasgInfos()){
			for(Pasgsect sect:p.getPasgsects()){
				System.out.println(sect.getAirlineCode());
			}
		}
		mv.setViewName("/OrderDetail");
		mv.addObject("order", order);
		return mv;
	}
	@ResponseBody
	@RequestMapping("/myorder")
	public Object MyOrder(HttpServletRequest req){
		ModelAndView mv=new ModelAndView("/Myorder");
		String member=req.getParameter("member");
		List<OrderList>orderList=orderListService.findBymember(member);
		orderList.get(0).setMember(member);
		for(int i=0;i<orderList.size();i++){
			List<OrderListFlt> olf=orderListService.searchSegmentById(orderList.get(i).getOrderId());
			orderList.get(i).setOrderListFlt(olf);
		}
	    JSONArray json=JSONArray.fromObject(orderList);
		mv.addObject("obj",json);
		return mv;
		
	}
	
	@ResponseBody
	@RequestMapping("/myorderList")
	public Object MyOrderList(HttpServletRequest req){
		Subject sub = SecurityUtils.getSubject();
		Object member = sub.getSession().getAttribute("member");
		String stat=req.getParameter("stat");//分类订单    all-全部订单      012-待支付......
		int pieces=Integer.parseInt(req.getParameter("pieces"));//每页多少条
        int page=Integer.parseInt(req.getParameter("page"));		//页数
	    int startPieces = (page * pieces) - pieces;//每页起始条数
		Map<String,Object>map = new HashMap<String ,Object>();
		map.put("member", String.valueOf(member));
		map.put("stat", stat);
		if(stat.equals("all")){//如果是全部订单
			map.put("stat", null);
		}
		map.put("pages", startPieces);
		map.put("pieces", pieces);
		List<OrderList> orderList=orderListService.queryPaging(map);
		for(int i=0;i<orderList.size();i++){
			List<OrderListFlt> olf=orderListService.searchSegmentById(orderList.get(i).getOrderId());
			orderList.get(i).setOrderListFlt(olf);
		}
		return orderList;
	}
	
	
	@ResponseBody
	@RequestMapping(value="/myPsgHis", method=RequestMethod.POST, produces="application/json")
	public Map<String,Object> PassengersHistory(HttpServletRequest req){
		boolean succeed=false;
		List<Passenger> list=null;
		try{
			Subject sub = SecurityUtils.getSubject();
			Object member = sub.getSession().getAttribute("member");
			int memberid = Integer.valueOf( member.toString());
			list = psgService.historys(memberid);
		}catch(Exception e){
			e.printStackTrace();
			list=null;
		}
		if(null != list){
			if(list.size()>0){
				succeed=true;
			}
		}
		Map<String,Object> v = new HashMap<String,Object>();
		v.put("succeed", succeed);
		v.put("msg", "");
		v.put("data", list);
		return v;
	}
	
	
	@RequestMapping("/order")
	public ModelAndView Order(String token, HttpServletRequest req) throws CustomException{
		ModelAndView view = new ModelAndView();
		ObjectMapper mapper = new ObjectMapper();
		mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		Av av = null;
		try{
			String b64 = StringUtil.decodeBase64(token, "UTF-8");
			av = mapper.readValue(b64, Av.class);
			String sign = av.getSign();
			log.info(sign);
			av.setSign("");
			String temp = mapper.writeValueAsString( av);
			log.info(temp);
			String md5 = Cryption.Md5( temp + av.getTime());
			log.info(md5);
			if(!md5.equals(sign)){
				av = null;
			}
		}catch(JsonMappingException e){
			e.printStackTrace();
		}catch(JsonParseException e){
			e.printStackTrace();
		}catch(JsonProcessingException e){
			e.printStackTrace();
		}catch(IOException e){
			e.printStackTrace();
		}
		if(null == av){
			throw new CustomException("请求异常！");
		}else{
			view.getModel().put("token", token);
			view.setViewName("/Order");	
		}
		return view;
	}
	
	@RequestMapping("/pay")
	public ModelAndView Pay(HttpServletRequest req,Long orderId){
		ModelAndView mv=new ModelAndView();
		if(orderId!=null){
			Order order=orderService.findById(orderId);
			mv.setViewName("/pay");
			mv.addObject("order", order);
			}
		return mv;
	}

}