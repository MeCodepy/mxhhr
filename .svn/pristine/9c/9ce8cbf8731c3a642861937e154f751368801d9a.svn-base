package com.lutao.america.controller;


import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.session.InvalidSessionException;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.lutao.america.model.User;
import com.lutao.america.service.UserService;
import com.lutao.common.utils.Cryption;
import com.lutao.common.utils.StringUtil;

import nl.captcha.Captcha;
import nl.captcha.Captcha.Builder;
import nl.captcha.backgrounds.FlatColorBackgroundProducer;
import nl.captcha.backgrounds.GradiatedBackgroundProducer;
import nl.captcha.gimpy.BlockGimpyRenderer;
import nl.captcha.gimpy.DropShadowGimpyRenderer;
import nl.captcha.gimpy.FishEyeGimpyRenderer;
import nl.captcha.gimpy.RippleGimpyRenderer;
import nl.captcha.servlet.CaptchaServletUtil;
import nl.captcha.text.producer.ChineseTextProducer;
import nl.captcha.text.producer.DefaultTextProducer;
import nl.captcha.text.renderer.ColoredEdgesWordRenderer;
import nl.captcha.text.renderer.WordRenderer;

import java.awt.Color;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

@Controller
@RequestMapping("/")
public class IndexController {
	private Log log = LogFactory.getLog(this.getClass().getName());
	
	@Autowired
	private UserService userService;
	
	/**
	 * 首页
	 * @param req
	 * @return
	 */
	@RequestMapping("/index")
	public String Index(HttpServletRequest req){
		return "/index";
	}
	
	/**
	 * 登陆
	 * @param req
	 * @return
	 */
	@RequestMapping("/login")
	public String Login(HttpServletRequest req){
		return "/login";
	}
	
	@RequestMapping(value="/captcha")
	public void Captcha(HttpServletRequest req, HttpServletResponse resp){
	   int _width = 150;
	   int _height = 48;
	    
	   Builder builder=new Captcha.Builder(_width, _height);
	   //增加边框
	   //builder.addBorder();
	   //干扰线
	   builder.addNoise();
	   //----------------自定义字体大小-----------
	   //自定义设置字体颜色和大小 最简单的效果 多种字体随机显示
	   List<Font> fontList = new ArrayList<Font>();
	   fontList.add(new Font("Arial", Font.ITALIC, 40));//可以设置斜体之类的
	   fontList.add(new Font("Courier", Font.BOLD, 40));
	   
	   //加入多种颜色后会随机显示 字体空心
	   List<Color> colorList=new ArrayList<Color>();
	   colorList.add(Color.black);
	   colorList.add(Color.red);
	   colorList.add(Color.blue);
	   ColoredEdgesWordRenderer cwr= new ColoredEdgesWordRenderer(colorList,fontList);
	   
	   WordRenderer wr=cwr;
	   //增加文本，默认为5个随机字符.
	   char[] numberChar = new char[] {'a','A', 'b', 'B','c','C', 'd','D',
		            'e','E', 'f', 'F','g','G', 'h','H', 'k','K', 'm','M', 'n','N', 'p','P', 'r','R', 'w','W', 'x','X', 'y','Y','2', '3', '4', '5', '6', '7', '8'};
	   builder.addText(new DefaultTextProducer(5,numberChar),wr);
	   
	   //--------------添加背景-------------
	   //设置背景渐进效果 以及颜色 form为开始颜色，to为结束颜色
	   GradiatedBackgroundProducer gbp=new GradiatedBackgroundProducer();
	   gbp.setFromColor(Color.gray);
	   gbp.setToColor(Color.white);
	   builder.addBackground(gbp);
	   //---------装饰字体---------------
	   // 字体边框齿轮效果 默认是3
	   builder.gimp(new BlockGimpyRenderer(1));
	   //波纹渲染 相当于加粗
	   builder.gimp(new RippleGimpyRenderer());
	   //加网--第一个参数是横线颜色，第二个参数是竖线颜色
	   //builder.gimp(new FishEyeGimpyRenderer(Color.red,Color.yellow));
	   //加入阴影效果 默认3，75 
	   //DropShadowGimpyRenderer shadow = new DropShadowGimpyRenderer(3, 50);
	   //builder.gimp( shadow);
       //创建对象
       Captcha captcha = builder.build();
       Subject sub = SecurityUtils.getSubject();
       sub.getSession().setAttribute(Captcha.NAME, Cryption.Md5(captcha.getAnswer().toLowerCase()));
       CaptchaServletUtil.writeImage(resp, captcha.getImage());
	}
	
	/**
	 * 执行登陆
	 * @param user
	 * @param req
	 * @return
	 */
	@RequestMapping(value="login/auth", method=RequestMethod.POST)
	public ModelAndView Login(User user, HttpServletRequest req){
		ModelAndView view = new ModelAndView();
		Subject sub = SecurityUtils.getSubject();
		//需要做验证码校验
		boolean checked = false;
		Object captcha = null;
		try{
		    captcha = sub.getSession().getAttribute(Captcha.NAME);
		}catch(InvalidSessionException e){
			e.printStackTrace();
			captcha = "";
		}
		if(StringUtil.IsNullOrEmptory(user.getCaptcha()) || StringUtil.IsNullOrEmptory(captcha) ){
			checked = false;
		}else{
			checked = Cryption.Md5(user.getCaptcha().toLowerCase()).equals(captcha);
		}
		if(!checked){
			view.getModel().put("error", true);
			view.getModel().put("msg", "验证码不正确");
			view.setViewName("/login");
			return view;
		}
		//shiro登陆
		UsernamePasswordToken token = new UsernamePasswordToken(user.getUserCode(), user.getUserPwd());
		try{
			sub.login(token);
			//登陆成功
			view.setViewName("redirect:/index");
		}catch(AuthenticationException e){
			e.printStackTrace();
			view.getModel().put("error", true);
			view.getModel().put("msg", "账号或者密码不正确");
			view.setViewName("/login");
		}
		return view;
	}
	
	@RequestMapping(value="/logout")
	public String Logout(HttpServletRequest req){
		Subject sub = SecurityUtils.getSubject();
		try {
			sub.logout();
		} catch (AuthenticationException e) {
			e.printStackTrace();
		}
		return "redirect:/login";
	}
	
	/**
	 * 注册
	 * @param req
	 * @return
	 */
	@RequestMapping("/reg")
	public String Register(HttpServletRequest req){
		return "/register";
	}
	
	/**
	 * 航班列表
	 * @param req
	 * @return
	 */
	@RequestMapping("/list")
	public ModelAndView List(HttpServletRequest req){
		ModelAndView view = new ModelAndView("/flightList");
		
		Subject sub = SecurityUtils.getSubject();
		if(sub.isAuthenticated()){
			Object name = sub.getSession().getAttribute("name");
			view.getModel().put("name", name);
			view.getModel().put("login", true);
		}
		return view;
	}
	
	/**
	 * 头部页
	 * @param req
	 * @return
	 */
	@RequestMapping(value="/top")
	public ModelAndView Top(HttpServletRequest req){
		ModelAndView view = new ModelAndView("/top");
		Subject sub = SecurityUtils.getSubject();
		if(sub.isAuthenticated()){
			Object name = sub.getSession().getAttribute("name");
			view.getModel().put("name", name);
			view.getModel().put("login", true);
		}
		return view;
	}
}